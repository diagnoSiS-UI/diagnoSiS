{"version":3,"sources":["images/Vector 1.png","images/titulo.png","images/logo.png","images/governo.png","images/icones.png","images/fapesq.png","componentes/Home.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Home","Fragment","className","src","fundo","style","marginLeft","marginTop","zindex","classNameName","titulo","alt","fontFamily","textAlign","fontSize","background","color","borderRadius","alignItems","width","position","right","top","logo","id","governo","icones","fapesq","App","basename","process","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qGAAAA,EAAOC,QAAU,IAA0B,sC,gBCA3CD,EAAOC,QAAU,IAA0B,oC,gBCA3CD,EAAOC,QAAU,IAA0B,kC,gBCA3CD,EAAOC,QAAU,IAA0B,qC,gBCA3CD,EAAOC,QAAU,IAA0B,oC,gBCA3CD,EAAOC,QAAU,IAA0B,oC,8RC2C5BC,MAlCf,WACI,OACI,kBAAC,IAAMC,SAAP,KACI,6BACI,yBAAKC,UAAU,QAAQC,IAAKC,MAC5B,yBAAKF,UAAU,OACf,yBAAKG,MAAO,CAACC,WAAW,OAAQC,UAAU,OAAQC,OAAO,MAAOC,cAAc,aAC1E,yBAAKN,IAAKO,IAAQC,IAAI,aAG1B,6BACA,yBAAKF,cAAc,OACf,yBAAKJ,MAAO,CAACC,WAAY,QAASJ,UAAU,YACxC,uBAAGG,MAAO,CAACO,WAAY,aAAcC,UAAU,UAAWC,SAAU,SAApE,mEAA6I,6BAA7I,gFAAuN,6BAAvN,+CAA4Q,6BAAS,6BAArR,2CAGR,yBAAKZ,UAAU,OACf,yBAAKA,UAAU,YACX,4BAAQG,MAAO,CAACU,WAAW,UAAUC,MAAM,OAAOC,aAAa,MAAMX,WAAW,OAAOC,UAAU,OAAOW,WAAW,SAAUC,MAAM,QAAQL,SAAS,SAAUZ,UAAU,eAAxK,aAEJ,yBAAKG,MAAO,CAACe,SAAS,YAAaC,MAAM,SAAUC,IAAK,SAAUnB,IAAKoB,IAAMZ,IAAI,UAEjF,4BAAQN,MAAO,CAACE,UAAU,OAAQD,WAAW,SAAUkB,GAAG,UACtD,6BACA,6BACA,yBAAKrB,IAAKsB,IAASd,IAAI,WACvB,yBAAKR,IAAKuB,IAAQf,IAAI,YACtB,yBAAKR,IAAKwB,IAAQhB,IAAI,YCnB3BiB,MAXf,WACE,OACE,kBAAC,IAAD,CAAeC,SAAUC,cACvB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,IAAIC,OAAO,EAAMC,UAAWjC,OCE5BkC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.e17952f6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Vector 1.b5aba27e.png\";","module.exports = __webpack_public_path__ + \"static/media/titulo.9c7a1c0c.png\";","module.exports = __webpack_public_path__ + \"static/media/logo.b9fabd24.png\";","module.exports = __webpack_public_path__ + \"static/media/governo.694d2e67.png\";","module.exports = __webpack_public_path__ + \"static/media/icones.72b21325.png\";","module.exports = __webpack_public_path__ + \"static/media/fapesq.3e04a24d.png\";","import React from 'react'\r\n\r\nimport fundo from '../images/Vector 1.png'\r\nimport titulo from '../images/titulo.png'\r\nimport logo from '../images/logo.png'\r\nimport governo from '../images/governo.png'\r\nimport icones from '../images/icones.png'\r\nimport fapesq from '../images/fapesq.png'\r\n\r\nfunction Home() {\r\n    return(\r\n        <React.Fragment>\r\n            <div>\r\n                <img className=\"fundo\" src={fundo}/>\r\n                <div className=\"row\">\r\n                <div style={{marginLeft:\"40px\", marginTop:\"20px\", zindex:\" 2\"}} classNameName=\"col-md-8 \">\r\n                    <img src={titulo} alt=\"titulo\"  />\r\n                </div>\r\n                </div>\r\n                <br></br>\r\n                <div classNameName=\"row\">\r\n                    <div style={{marginLeft: \"40px\"}} className=\"col-md-8\">\r\n                        <p style={{fontFamily: \"Droid Sans\", textAlign:\"justify\", fontSize: \"20px\"}}>PROJETO FAPESQ: Plataforma Computacional Open Source Baseada em <br></br>Deep Learning para Auxílio na Detecção/Diagnóstico do COVID-19 a <br></br>partir de Imagens de Exames de Radiografia. <br></br><br></br>Edital Nº 003/2020 - FAPESQ/SEECT </p>\r\n                    </div>\r\n                </div>\r\n                <div className=\"row\">\r\n                <div className=\"col-md-4\">\r\n                    <button style={{background:\"#747484\",color:\"#fff\",borderRadius:\"6px\",marginLeft:\"80px\",marginTop:\"40px\",alignItems:\"center\", width:\" 100%\",fontSize:\" 25px\"}} className=\"btn btnHome\">Diagnose</button>\r\n                </div>\r\n                <img style={{position:\" absolute\", right:\" 180px\", top: \"100px\"}} src={logo} alt=\"logo\"/>\r\n                </div>\r\n                <footer style={{marginTop:\"30px\", marginLeft:\" 80px\"}} id=\"footer\">\r\n                    <br></br>\r\n                    <br></br>\r\n                    <img src={governo} alt=\"brasao\"  />\r\n                    <img src={icones} alt=\"governo\"  />                \r\n                    <img src={fapesq} alt=\"img\"  />\r\n                </footer>   \r\n            </div>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default Home","import React from 'react';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport './App.css';\n\nimport Home from './componentes/Home.jsx'\n\nfunction App() {\n  return (\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n      <Switch>\n        <Route path=\"/\" exact={true} component={Home}/>\n        \n      </Switch>\n  </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}